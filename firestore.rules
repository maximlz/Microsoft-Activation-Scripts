rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Функция для проверки, является ли пользователь администратором
    function isAdmin() {
      return request.auth != null && request.auth.token.email_verified && request.auth.token.email.matches('.*@artbutton\\.com$');
    }

    function isGuestUpdatingOwnBookingStatus() {
      let incomingData = request.resource.data;
      let existingData = resource.data;
      // Проверяем, что пользователь не аутентифицирован (это гость)
      // Проверяем, что registrationToken в запросе совпадает с существующим
      // Проверяем, что новый статус - 'completed'
      // Проверяем, что изменилось ТОЛЬКО поле status
      return request.auth == null &&
             incomingData.registrationToken == existingData.registrationToken &&
             incomingData.status == 'completed' &&
             // Проверка, что изменилось только поле status
             incomingData.diff(existingData).affectedKeys().hasOnly(['status']);
    }

    // Коллекция стран (countries)
    match /countries/{countryId} {
      // Разрешаем чтение всем (если это нужно для основной формы)
      allow read: if true;
      // Запись/удаление/обновление разрешаем только администраторам
      allow write: if isAdmin();
    }

    // Коллекция регистраций гостей (guests)
    match /guests/{guestId} {
      // Разрешаем создание гостя через Cloud Function (само правило оставляем для справки)
      allow create: if request.auth == null &&
                     request.resource.data.bookingId != null &&
                     request.resource.data.bookingConfirmationCode != null &&
                     get(/databases/$(database)/documents/bookings/$(request.resource.data.bookingId)).data.confirmationCode == request.resource.data.bookingConfirmationCode &&
                     get(/databases/$(database)/documents/bookings/$(request.resource.data.bookingId)).data.status == 'pending';

      // Правила чтения/обновления/удаления теперь используют функцию isAdmin() вместо проверки токена isAdmin
      allow read, update, delete: if isAdmin();
    }

    // Коллекция бронирований (bookings)
    match /bookings/{bookingId} {
      // ВОЗВРАЩАЕМ БЕЗОПАСНОЕ ПРАВИЛО
      allow read: if request.auth != null; // Было: if true;

      // Создавать могут только админы ( isAdmin() )
      // При создании обязательные поля: propertyName, checkInDate, checkOutDate, registrationToken, createdAt, status, confirmationCode
      allow create: if isAdmin() &&
                      request.resource.data.keys().hasAll(['propertyName', 'checkInDate', 'checkOutDate', 'registrationToken', 'createdAt', 'status', 'confirmationCode']) &&
                      request.resource.data.status == 'pending'; // Статус при создании всегда pending

      // Обновлять могут админы (полностью) или гость (только статус)
      allow update: if isAdmin() 
                    || isGuestUpdatingOwnBookingStatus(); // Гость меняет только статус

      // Удалять могут только админы
      allow delete: if isAdmin();
    }

    // --- NEW ---
    // Allow authenticated users (admins) to manage properties
    match /properties/{propertyId} {
      allow read, write: if isAdmin();
    }
    // --- END NEW ---

    // Другие коллекции (если есть)
    // match /otherCollection/{docId} {
    //   allow read, write: if isAdmin();
    // }
  }
} 